// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/sys/v1/sysRole.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSysRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSysRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSysRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSysRoleRequestMultiError, or nil if none found.
func (m *CreateSysRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSysRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleName

	// no validation rules for RoleDesc

	// no validation rules for CreateUser

	// no validation rules for UpdateUser

	if len(errors) > 0 {
		return CreateSysRoleRequestMultiError(errors)
	}

	return nil
}

// CreateSysRoleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSysRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSysRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSysRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSysRoleRequestMultiError) AllErrors() []error { return m }

// CreateSysRoleRequestValidationError is the validation error returned by
// CreateSysRoleRequest.Validate if the designated constraints aren't met.
type CreateSysRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSysRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSysRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSysRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSysRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSysRoleRequestValidationError) ErrorName() string {
	return "CreateSysRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSysRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSysRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSysRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSysRoleRequestValidationError{}

// Validate checks the field values on CreateSysRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSysRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSysRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSysRoleReplyMultiError, or nil if none found.
func (m *CreateSysRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSysRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateSysRoleReplyMultiError(errors)
	}

	return nil
}

// CreateSysRoleReplyMultiError is an error wrapping multiple validation errors
// returned by CreateSysRoleReply.ValidateAll() if the designated constraints
// aren't met.
type CreateSysRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSysRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSysRoleReplyMultiError) AllErrors() []error { return m }

// CreateSysRoleReplyValidationError is the validation error returned by
// CreateSysRoleReply.Validate if the designated constraints aren't met.
type CreateSysRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSysRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSysRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSysRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSysRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSysRoleReplyValidationError) ErrorName() string {
	return "CreateSysRoleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSysRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSysRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSysRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSysRoleReplyValidationError{}

// Validate checks the field values on DeleteSysRoleByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysRoleByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysRoleByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysRoleByIDRequestMultiError, or nil if none found.
func (m *DeleteSysRoleByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysRoleByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteSysRoleByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSysRoleByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteSysRoleByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSysRoleByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSysRoleByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysRoleByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysRoleByIDRequestMultiError) AllErrors() []error { return m }

// DeleteSysRoleByIDRequestValidationError is the validation error returned by
// DeleteSysRoleByIDRequest.Validate if the designated constraints aren't met.
type DeleteSysRoleByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysRoleByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysRoleByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysRoleByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysRoleByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysRoleByIDRequestValidationError) ErrorName() string {
	return "DeleteSysRoleByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSysRoleByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysRoleByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysRoleByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysRoleByIDRequestValidationError{}

// Validate checks the field values on DeleteSysRoleByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysRoleByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysRoleByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysRoleByIDReplyMultiError, or nil if none found.
func (m *DeleteSysRoleByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysRoleByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSysRoleByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteSysRoleByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteSysRoleByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteSysRoleByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysRoleByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysRoleByIDReplyMultiError) AllErrors() []error { return m }

// DeleteSysRoleByIDReplyValidationError is the validation error returned by
// DeleteSysRoleByIDReply.Validate if the designated constraints aren't met.
type DeleteSysRoleByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysRoleByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysRoleByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysRoleByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysRoleByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysRoleByIDReplyValidationError) ErrorName() string {
	return "DeleteSysRoleByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSysRoleByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysRoleByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysRoleByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysRoleByIDReplyValidationError{}

// Validate checks the field values on DeleteSysRoleByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysRoleByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysRoleByIDsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysRoleByIDsRequestMultiError, or nil if none found.
func (m *DeleteSysRoleByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysRoleByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := DeleteSysRoleByIDsRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSysRoleByIDsRequestMultiError(errors)
	}

	return nil
}

// DeleteSysRoleByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSysRoleByIDsRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteSysRoleByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysRoleByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysRoleByIDsRequestMultiError) AllErrors() []error { return m }

// DeleteSysRoleByIDsRequestValidationError is the validation error returned by
// DeleteSysRoleByIDsRequest.Validate if the designated constraints aren't met.
type DeleteSysRoleByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysRoleByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysRoleByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysRoleByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysRoleByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysRoleByIDsRequestValidationError) ErrorName() string {
	return "DeleteSysRoleByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSysRoleByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysRoleByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysRoleByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysRoleByIDsRequestValidationError{}

// Validate checks the field values on DeleteSysRoleByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysRoleByIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysRoleByIDsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysRoleByIDsReplyMultiError, or nil if none found.
func (m *DeleteSysRoleByIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysRoleByIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSysRoleByIDsReplyMultiError(errors)
	}

	return nil
}

// DeleteSysRoleByIDsReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteSysRoleByIDsReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteSysRoleByIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysRoleByIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysRoleByIDsReplyMultiError) AllErrors() []error { return m }

// DeleteSysRoleByIDsReplyValidationError is the validation error returned by
// DeleteSysRoleByIDsReply.Validate if the designated constraints aren't met.
type DeleteSysRoleByIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysRoleByIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysRoleByIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysRoleByIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysRoleByIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysRoleByIDsReplyValidationError) ErrorName() string {
	return "DeleteSysRoleByIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSysRoleByIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysRoleByIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysRoleByIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysRoleByIDsReplyValidationError{}

// Validate checks the field values on UpdateSysRoleByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSysRoleByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSysRoleByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSysRoleByIDRequestMultiError, or nil if none found.
func (m *UpdateSysRoleByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSysRoleByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RoleName

	// no validation rules for RoleDesc

	// no validation rules for CreateUser

	// no validation rules for UpdateUser

	if len(errors) > 0 {
		return UpdateSysRoleByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateSysRoleByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSysRoleByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSysRoleByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSysRoleByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSysRoleByIDRequestMultiError) AllErrors() []error { return m }

// UpdateSysRoleByIDRequestValidationError is the validation error returned by
// UpdateSysRoleByIDRequest.Validate if the designated constraints aren't met.
type UpdateSysRoleByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSysRoleByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSysRoleByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSysRoleByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSysRoleByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSysRoleByIDRequestValidationError) ErrorName() string {
	return "UpdateSysRoleByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSysRoleByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSysRoleByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSysRoleByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSysRoleByIDRequestValidationError{}

// Validate checks the field values on UpdateSysRoleByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSysRoleByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSysRoleByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSysRoleByIDReplyMultiError, or nil if none found.
func (m *UpdateSysRoleByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSysRoleByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSysRoleByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateSysRoleByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateSysRoleByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateSysRoleByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSysRoleByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSysRoleByIDReplyMultiError) AllErrors() []error { return m }

// UpdateSysRoleByIDReplyValidationError is the validation error returned by
// UpdateSysRoleByIDReply.Validate if the designated constraints aren't met.
type UpdateSysRoleByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSysRoleByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSysRoleByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSysRoleByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSysRoleByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSysRoleByIDReplyValidationError) ErrorName() string {
	return "UpdateSysRoleByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSysRoleByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSysRoleByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSysRoleByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSysRoleByIDReplyValidationError{}

// Validate checks the field values on SysRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysRole with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SysRoleMultiError, or nil if none found.
func (m *SysRole) ValidateAll() error {
	return m.validate(true)
}

func (m *SysRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RoleName

	// no validation rules for RoleDesc

	// no validation rules for CreateUser

	// no validation rules for UpdateUser

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SysRoleMultiError(errors)
	}

	return nil
}

// SysRoleMultiError is an error wrapping multiple validation errors returned
// by SysRole.ValidateAll() if the designated constraints aren't met.
type SysRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysRoleMultiError) AllErrors() []error { return m }

// SysRoleValidationError is the validation error returned by SysRole.Validate
// if the designated constraints aren't met.
type SysRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysRoleValidationError) ErrorName() string { return "SysRoleValidationError" }

// Error satisfies the builtin error interface
func (e SysRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysRoleValidationError{}

// Validate checks the field values on GetSysRoleByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSysRoleByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysRoleByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysRoleByIDRequestMultiError, or nil if none found.
func (m *GetSysRoleByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysRoleByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetSysRoleByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSysRoleByIDRequestMultiError(errors)
	}

	return nil
}

// GetSysRoleByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetSysRoleByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSysRoleByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysRoleByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysRoleByIDRequestMultiError) AllErrors() []error { return m }

// GetSysRoleByIDRequestValidationError is the validation error returned by
// GetSysRoleByIDRequest.Validate if the designated constraints aren't met.
type GetSysRoleByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysRoleByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysRoleByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysRoleByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysRoleByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysRoleByIDRequestValidationError) ErrorName() string {
	return "GetSysRoleByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysRoleByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysRoleByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysRoleByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysRoleByIDRequestValidationError{}

// Validate checks the field values on GetSysRoleByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSysRoleByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysRoleByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysRoleByIDReplyMultiError, or nil if none found.
func (m *GetSysRoleByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysRoleByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSysRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysRoleByIDReplyValidationError{
					field:  "SysRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysRoleByIDReplyValidationError{
					field:  "SysRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSysRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysRoleByIDReplyValidationError{
				field:  "SysRole",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSysRoleByIDReplyMultiError(errors)
	}

	return nil
}

// GetSysRoleByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetSysRoleByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetSysRoleByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysRoleByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysRoleByIDReplyMultiError) AllErrors() []error { return m }

// GetSysRoleByIDReplyValidationError is the validation error returned by
// GetSysRoleByIDReply.Validate if the designated constraints aren't met.
type GetSysRoleByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysRoleByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysRoleByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysRoleByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysRoleByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysRoleByIDReplyValidationError) ErrorName() string {
	return "GetSysRoleByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysRoleByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysRoleByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysRoleByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysRoleByIDReplyValidationError{}

// Validate checks the field values on GetSysRoleByConditionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSysRoleByConditionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysRoleByConditionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysRoleByConditionRequestMultiError, or nil if none found.
func (m *GetSysRoleByConditionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysRoleByConditionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConditions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysRoleByConditionRequestValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysRoleByConditionRequestValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConditions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysRoleByConditionRequestValidationError{
				field:  "Conditions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSysRoleByConditionRequestMultiError(errors)
	}

	return nil
}

// GetSysRoleByConditionRequestMultiError is an error wrapping multiple
// validation errors returned by GetSysRoleByConditionRequest.ValidateAll() if
// the designated constraints aren't met.
type GetSysRoleByConditionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysRoleByConditionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysRoleByConditionRequestMultiError) AllErrors() []error { return m }

// GetSysRoleByConditionRequestValidationError is the validation error returned
// by GetSysRoleByConditionRequest.Validate if the designated constraints
// aren't met.
type GetSysRoleByConditionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysRoleByConditionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysRoleByConditionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysRoleByConditionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysRoleByConditionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysRoleByConditionRequestValidationError) ErrorName() string {
	return "GetSysRoleByConditionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysRoleByConditionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysRoleByConditionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysRoleByConditionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysRoleByConditionRequestValidationError{}

// Validate checks the field values on GetSysRoleByConditionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSysRoleByConditionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysRoleByConditionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysRoleByConditionReplyMultiError, or nil if none found.
func (m *GetSysRoleByConditionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysRoleByConditionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSysRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysRoleByConditionReplyValidationError{
					field:  "SysRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysRoleByConditionReplyValidationError{
					field:  "SysRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSysRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysRoleByConditionReplyValidationError{
				field:  "SysRole",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSysRoleByConditionReplyMultiError(errors)
	}

	return nil
}

// GetSysRoleByConditionReplyMultiError is an error wrapping multiple
// validation errors returned by GetSysRoleByConditionReply.ValidateAll() if
// the designated constraints aren't met.
type GetSysRoleByConditionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysRoleByConditionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysRoleByConditionReplyMultiError) AllErrors() []error { return m }

// GetSysRoleByConditionReplyValidationError is the validation error returned
// by GetSysRoleByConditionReply.Validate if the designated constraints aren't met.
type GetSysRoleByConditionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysRoleByConditionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysRoleByConditionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysRoleByConditionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysRoleByConditionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysRoleByConditionReplyValidationError) ErrorName() string {
	return "GetSysRoleByConditionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysRoleByConditionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysRoleByConditionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysRoleByConditionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysRoleByConditionReplyValidationError{}

// Validate checks the field values on ListSysRoleByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSysRoleByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysRoleByIDsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysRoleByIDsRequestMultiError, or nil if none found.
func (m *ListSysRoleByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysRoleByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := ListSysRoleByIDsRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSysRoleByIDsRequestMultiError(errors)
	}

	return nil
}

// ListSysRoleByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by ListSysRoleByIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSysRoleByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysRoleByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysRoleByIDsRequestMultiError) AllErrors() []error { return m }

// ListSysRoleByIDsRequestValidationError is the validation error returned by
// ListSysRoleByIDsRequest.Validate if the designated constraints aren't met.
type ListSysRoleByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysRoleByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysRoleByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysRoleByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysRoleByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysRoleByIDsRequestValidationError) ErrorName() string {
	return "ListSysRoleByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSysRoleByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysRoleByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysRoleByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysRoleByIDsRequestValidationError{}

// Validate checks the field values on ListSysRoleByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSysRoleByIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysRoleByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysRoleByIDsReplyMultiError, or nil if none found.
func (m *ListSysRoleByIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysRoleByIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSysRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSysRoleByIDsReplyValidationError{
						field:  fmt.Sprintf("SysRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSysRoleByIDsReplyValidationError{
						field:  fmt.Sprintf("SysRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSysRoleByIDsReplyValidationError{
					field:  fmt.Sprintf("SysRoles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSysRoleByIDsReplyMultiError(errors)
	}

	return nil
}

// ListSysRoleByIDsReplyMultiError is an error wrapping multiple validation
// errors returned by ListSysRoleByIDsReply.ValidateAll() if the designated
// constraints aren't met.
type ListSysRoleByIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysRoleByIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysRoleByIDsReplyMultiError) AllErrors() []error { return m }

// ListSysRoleByIDsReplyValidationError is the validation error returned by
// ListSysRoleByIDsReply.Validate if the designated constraints aren't met.
type ListSysRoleByIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysRoleByIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysRoleByIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysRoleByIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysRoleByIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysRoleByIDsReplyValidationError) ErrorName() string {
	return "ListSysRoleByIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSysRoleByIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysRoleByIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysRoleByIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysRoleByIDsReplyValidationError{}

// Validate checks the field values on ListSysRoleByLastIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSysRoleByLastIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysRoleByLastIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysRoleByLastIDRequestMultiError, or nil if none found.
func (m *ListSysRoleByLastIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysRoleByLastIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LastID

	if m.GetLimit() <= 0 {
		err := ListSysRoleByLastIDRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Sort

	if len(errors) > 0 {
		return ListSysRoleByLastIDRequestMultiError(errors)
	}

	return nil
}

// ListSysRoleByLastIDRequestMultiError is an error wrapping multiple
// validation errors returned by ListSysRoleByLastIDRequest.ValidateAll() if
// the designated constraints aren't met.
type ListSysRoleByLastIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysRoleByLastIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysRoleByLastIDRequestMultiError) AllErrors() []error { return m }

// ListSysRoleByLastIDRequestValidationError is the validation error returned
// by ListSysRoleByLastIDRequest.Validate if the designated constraints aren't met.
type ListSysRoleByLastIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysRoleByLastIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysRoleByLastIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysRoleByLastIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysRoleByLastIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysRoleByLastIDRequestValidationError) ErrorName() string {
	return "ListSysRoleByLastIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSysRoleByLastIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysRoleByLastIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysRoleByLastIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysRoleByLastIDRequestValidationError{}

// Validate checks the field values on ListSysRoleByLastIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSysRoleByLastIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysRoleByLastIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysRoleByLastIDReplyMultiError, or nil if none found.
func (m *ListSysRoleByLastIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysRoleByLastIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSysRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSysRoleByLastIDReplyValidationError{
						field:  fmt.Sprintf("SysRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSysRoleByLastIDReplyValidationError{
						field:  fmt.Sprintf("SysRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSysRoleByLastIDReplyValidationError{
					field:  fmt.Sprintf("SysRoles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSysRoleByLastIDReplyMultiError(errors)
	}

	return nil
}

// ListSysRoleByLastIDReplyMultiError is an error wrapping multiple validation
// errors returned by ListSysRoleByLastIDReply.ValidateAll() if the designated
// constraints aren't met.
type ListSysRoleByLastIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysRoleByLastIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysRoleByLastIDReplyMultiError) AllErrors() []error { return m }

// ListSysRoleByLastIDReplyValidationError is the validation error returned by
// ListSysRoleByLastIDReply.Validate if the designated constraints aren't met.
type ListSysRoleByLastIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysRoleByLastIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysRoleByLastIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysRoleByLastIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysRoleByLastIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysRoleByLastIDReplyValidationError) ErrorName() string {
	return "ListSysRoleByLastIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSysRoleByLastIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysRoleByLastIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysRoleByLastIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysRoleByLastIDReplyValidationError{}

// Validate checks the field values on ListSysRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSysRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysRoleRequestMultiError, or nil if none found.
func (m *ListSysRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSysRoleRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSysRoleRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSysRoleRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSysRoleRequestMultiError(errors)
	}

	return nil
}

// ListSysRoleRequestMultiError is an error wrapping multiple validation errors
// returned by ListSysRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSysRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysRoleRequestMultiError) AllErrors() []error { return m }

// ListSysRoleRequestValidationError is the validation error returned by
// ListSysRoleRequest.Validate if the designated constraints aren't met.
type ListSysRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysRoleRequestValidationError) ErrorName() string {
	return "ListSysRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSysRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysRoleRequestValidationError{}

// Validate checks the field values on ListSysRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSysRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysRoleReplyMultiError, or nil if none found.
func (m *ListSysRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetSysRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSysRoleReplyValidationError{
						field:  fmt.Sprintf("SysRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSysRoleReplyValidationError{
						field:  fmt.Sprintf("SysRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSysRoleReplyValidationError{
					field:  fmt.Sprintf("SysRoles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSysRoleReplyMultiError(errors)
	}

	return nil
}

// ListSysRoleReplyMultiError is an error wrapping multiple validation errors
// returned by ListSysRoleReply.ValidateAll() if the designated constraints
// aren't met.
type ListSysRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysRoleReplyMultiError) AllErrors() []error { return m }

// ListSysRoleReplyValidationError is the validation error returned by
// ListSysRoleReply.Validate if the designated constraints aren't met.
type ListSysRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysRoleReplyValidationError) ErrorName() string { return "ListSysRoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListSysRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysRoleReplyValidationError{}
