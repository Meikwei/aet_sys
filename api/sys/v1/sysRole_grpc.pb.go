// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/sys/v1/sysRole.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysRole_Create_FullMethodName         = "/api.sys.v1.sysRole/Create"
	SysRole_DeleteByID_FullMethodName     = "/api.sys.v1.sysRole/DeleteByID"
	SysRole_DeleteByIDs_FullMethodName    = "/api.sys.v1.sysRole/DeleteByIDs"
	SysRole_UpdateByID_FullMethodName     = "/api.sys.v1.sysRole/UpdateByID"
	SysRole_GetByID_FullMethodName        = "/api.sys.v1.sysRole/GetByID"
	SysRole_GetByCondition_FullMethodName = "/api.sys.v1.sysRole/GetByCondition"
	SysRole_ListByIDs_FullMethodName      = "/api.sys.v1.sysRole/ListByIDs"
	SysRole_ListByLastID_FullMethodName   = "/api.sys.v1.sysRole/ListByLastID"
	SysRole_List_FullMethodName           = "/api.sys.v1.sysRole/List"
)

// SysRoleClient is the client API for SysRole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysRoleClient interface {
	// create sysRole
	Create(ctx context.Context, in *CreateSysRoleRequest, opts ...grpc.CallOption) (*CreateSysRoleReply, error)
	// delete sysRole by id
	DeleteByID(ctx context.Context, in *DeleteSysRoleByIDRequest, opts ...grpc.CallOption) (*DeleteSysRoleByIDReply, error)
	// delete sysRole by batch id
	DeleteByIDs(ctx context.Context, in *DeleteSysRoleByIDsRequest, opts ...grpc.CallOption) (*DeleteSysRoleByIDsReply, error)
	// update sysRole by id
	UpdateByID(ctx context.Context, in *UpdateSysRoleByIDRequest, opts ...grpc.CallOption) (*UpdateSysRoleByIDReply, error)
	// get sysRole by id
	GetByID(ctx context.Context, in *GetSysRoleByIDRequest, opts ...grpc.CallOption) (*GetSysRoleByIDReply, error)
	// get sysRole by condition
	GetByCondition(ctx context.Context, in *GetSysRoleByConditionRequest, opts ...grpc.CallOption) (*GetSysRoleByConditionReply, error)
	// list of sysRole by batch id
	ListByIDs(ctx context.Context, in *ListSysRoleByIDsRequest, opts ...grpc.CallOption) (*ListSysRoleByIDsReply, error)
	// list sysRole by last id
	ListByLastID(ctx context.Context, in *ListSysRoleByLastIDRequest, opts ...grpc.CallOption) (*ListSysRoleByLastIDReply, error)
	// list of sysRole by query parameters
	List(ctx context.Context, in *ListSysRoleRequest, opts ...grpc.CallOption) (*ListSysRoleReply, error)
}

type sysRoleClient struct {
	cc grpc.ClientConnInterface
}

func NewSysRoleClient(cc grpc.ClientConnInterface) SysRoleClient {
	return &sysRoleClient{cc}
}

func (c *sysRoleClient) Create(ctx context.Context, in *CreateSysRoleRequest, opts ...grpc.CallOption) (*CreateSysRoleReply, error) {
	out := new(CreateSysRoleReply)
	err := c.cc.Invoke(ctx, SysRole_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) DeleteByID(ctx context.Context, in *DeleteSysRoleByIDRequest, opts ...grpc.CallOption) (*DeleteSysRoleByIDReply, error) {
	out := new(DeleteSysRoleByIDReply)
	err := c.cc.Invoke(ctx, SysRole_DeleteByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) DeleteByIDs(ctx context.Context, in *DeleteSysRoleByIDsRequest, opts ...grpc.CallOption) (*DeleteSysRoleByIDsReply, error) {
	out := new(DeleteSysRoleByIDsReply)
	err := c.cc.Invoke(ctx, SysRole_DeleteByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) UpdateByID(ctx context.Context, in *UpdateSysRoleByIDRequest, opts ...grpc.CallOption) (*UpdateSysRoleByIDReply, error) {
	out := new(UpdateSysRoleByIDReply)
	err := c.cc.Invoke(ctx, SysRole_UpdateByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) GetByID(ctx context.Context, in *GetSysRoleByIDRequest, opts ...grpc.CallOption) (*GetSysRoleByIDReply, error) {
	out := new(GetSysRoleByIDReply)
	err := c.cc.Invoke(ctx, SysRole_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) GetByCondition(ctx context.Context, in *GetSysRoleByConditionRequest, opts ...grpc.CallOption) (*GetSysRoleByConditionReply, error) {
	out := new(GetSysRoleByConditionReply)
	err := c.cc.Invoke(ctx, SysRole_GetByCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) ListByIDs(ctx context.Context, in *ListSysRoleByIDsRequest, opts ...grpc.CallOption) (*ListSysRoleByIDsReply, error) {
	out := new(ListSysRoleByIDsReply)
	err := c.cc.Invoke(ctx, SysRole_ListByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) ListByLastID(ctx context.Context, in *ListSysRoleByLastIDRequest, opts ...grpc.CallOption) (*ListSysRoleByLastIDReply, error) {
	out := new(ListSysRoleByLastIDReply)
	err := c.cc.Invoke(ctx, SysRole_ListByLastID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) List(ctx context.Context, in *ListSysRoleRequest, opts ...grpc.CallOption) (*ListSysRoleReply, error) {
	out := new(ListSysRoleReply)
	err := c.cc.Invoke(ctx, SysRole_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysRoleServer is the server API for SysRole service.
// All implementations must embed UnimplementedSysRoleServer
// for forward compatibility
type SysRoleServer interface {
	// create sysRole
	Create(context.Context, *CreateSysRoleRequest) (*CreateSysRoleReply, error)
	// delete sysRole by id
	DeleteByID(context.Context, *DeleteSysRoleByIDRequest) (*DeleteSysRoleByIDReply, error)
	// delete sysRole by batch id
	DeleteByIDs(context.Context, *DeleteSysRoleByIDsRequest) (*DeleteSysRoleByIDsReply, error)
	// update sysRole by id
	UpdateByID(context.Context, *UpdateSysRoleByIDRequest) (*UpdateSysRoleByIDReply, error)
	// get sysRole by id
	GetByID(context.Context, *GetSysRoleByIDRequest) (*GetSysRoleByIDReply, error)
	// get sysRole by condition
	GetByCondition(context.Context, *GetSysRoleByConditionRequest) (*GetSysRoleByConditionReply, error)
	// list of sysRole by batch id
	ListByIDs(context.Context, *ListSysRoleByIDsRequest) (*ListSysRoleByIDsReply, error)
	// list sysRole by last id
	ListByLastID(context.Context, *ListSysRoleByLastIDRequest) (*ListSysRoleByLastIDReply, error)
	// list of sysRole by query parameters
	List(context.Context, *ListSysRoleRequest) (*ListSysRoleReply, error)
	mustEmbedUnimplementedSysRoleServer()
}

// UnimplementedSysRoleServer must be embedded to have forward compatible implementations.
type UnimplementedSysRoleServer struct {
}

func (UnimplementedSysRoleServer) Create(context.Context, *CreateSysRoleRequest) (*CreateSysRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSysRoleServer) DeleteByID(context.Context, *DeleteSysRoleByIDRequest) (*DeleteSysRoleByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (UnimplementedSysRoleServer) DeleteByIDs(context.Context, *DeleteSysRoleByIDsRequest) (*DeleteSysRoleByIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByIDs not implemented")
}
func (UnimplementedSysRoleServer) UpdateByID(context.Context, *UpdateSysRoleByIDRequest) (*UpdateSysRoleByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByID not implemented")
}
func (UnimplementedSysRoleServer) GetByID(context.Context, *GetSysRoleByIDRequest) (*GetSysRoleByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedSysRoleServer) GetByCondition(context.Context, *GetSysRoleByConditionRequest) (*GetSysRoleByConditionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCondition not implemented")
}
func (UnimplementedSysRoleServer) ListByIDs(context.Context, *ListSysRoleByIDsRequest) (*ListSysRoleByIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByIDs not implemented")
}
func (UnimplementedSysRoleServer) ListByLastID(context.Context, *ListSysRoleByLastIDRequest) (*ListSysRoleByLastIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByLastID not implemented")
}
func (UnimplementedSysRoleServer) List(context.Context, *ListSysRoleRequest) (*ListSysRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSysRoleServer) mustEmbedUnimplementedSysRoleServer() {}

// UnsafeSysRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysRoleServer will
// result in compilation errors.
type UnsafeSysRoleServer interface {
	mustEmbedUnimplementedSysRoleServer()
}

func RegisterSysRoleServer(s grpc.ServiceRegistrar, srv SysRoleServer) {
	s.RegisterService(&SysRole_ServiceDesc, srv)
}

func _SysRole_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSysRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRole_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).Create(ctx, req.(*CreateSysRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSysRoleByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRole_DeleteByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).DeleteByID(ctx, req.(*DeleteSysRoleByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_DeleteByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSysRoleByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).DeleteByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRole_DeleteByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).DeleteByIDs(ctx, req.(*DeleteSysRoleByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_UpdateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysRoleByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).UpdateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRole_UpdateByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).UpdateByID(ctx, req.(*UpdateSysRoleByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysRoleByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRole_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).GetByID(ctx, req.(*GetSysRoleByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_GetByCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysRoleByConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).GetByCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRole_GetByCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).GetByCondition(ctx, req.(*GetSysRoleByConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_ListByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSysRoleByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).ListByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRole_ListByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).ListByIDs(ctx, req.(*ListSysRoleByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_ListByLastID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSysRoleByLastIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).ListByLastID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRole_ListByLastID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).ListByLastID(ctx, req.(*ListSysRoleByLastIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSysRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysRole_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).List(ctx, req.(*ListSysRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysRole_ServiceDesc is the grpc.ServiceDesc for SysRole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysRole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sys.v1.sysRole",
	HandlerType: (*SysRoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SysRole_Create_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _SysRole_DeleteByID_Handler,
		},
		{
			MethodName: "DeleteByIDs",
			Handler:    _SysRole_DeleteByIDs_Handler,
		},
		{
			MethodName: "UpdateByID",
			Handler:    _SysRole_UpdateByID_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _SysRole_GetByID_Handler,
		},
		{
			MethodName: "GetByCondition",
			Handler:    _SysRole_GetByCondition_Handler,
		},
		{
			MethodName: "ListByIDs",
			Handler:    _SysRole_ListByIDs_Handler,
		},
		{
			MethodName: "ListByLastID",
			Handler:    _SysRole_ListByLastID_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SysRole_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sys/v1/sysRole.proto",
}
