// Code generated by https://github.com/zhufuyi/sponge

package routers

import (
	"context"

	"github.com/gin-gonic/gin"
	"google.golang.org/grpc/metadata"

	"github.com/zhufuyi/sponge/pkg/gin/middleware"
	"github.com/zhufuyi/sponge/pkg/logger"

	sysV1 "github.com/Meikwei/aet_sys/api/sys/v1"
	"github.com/Meikwei/aet_sys/internal/handler"
)

func init() {
	allMiddlewareFns = append(allMiddlewareFns, func(c *middlewareConfig) {
		sysRoleMiddlewares(c)
	})

	allRouteFns = append(allRouteFns,
		func(r *gin.Engine, groupPathMiddlewares map[string][]gin.HandlerFunc, singlePathMiddlewares map[string][]gin.HandlerFunc) {
			sysRoleRouter(r, groupPathMiddlewares, singlePathMiddlewares, handler.NewSysRoleHandler())
		})
}

func sysRoleRouter(
	r *gin.Engine,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iService sysV1.SysRoleLogicer) {
	ctxFn := func(c *gin.Context) context.Context {
		md := metadata.New(map[string]string{
			middleware.ContextRequestIDKey: middleware.GCtxRequestID(c),
		})
		return metadata.NewIncomingContext(c.Request.Context(), md)
	}
	sysV1.RegisterSysRoleRouter(
		r,
		groupPathMiddlewares,
		singlePathMiddlewares,
		iService,
		sysV1.WithSysRoleLogger(logger.Get()),
		sysV1.WithSysRoleRPCResponse(),
		sysV1.WithSysRoleWrapCtx(ctxFn),
		sysV1.WithSysRoleErrorToHTTPCode(
		// Set some error codes to standard http return codes,
		// by default there is already ecode.InternalServerError and ecode.ServiceUnavailable
		// example:
		// 	ecode.Forbidden, ecode.LimitExceed,
		),
	)
}

// you can set the middleware of a route group, or set the middleware of a single route,
// or you can mix them, pay attention to the duplication of middleware when mixing them,
// it is recommended to set the middleware of a single route in preference
func sysRoleMiddlewares(c *middlewareConfig) {
	// set up group route middleware, group path is left prefix rules,
	// if the left prefix is hit, the middleware will take effect, e.g. group route is /api/v1, route /api/v1/sysRole/:id  will take effect
	// c.setGroupPath("/api/v1/sysRole", middleware.Auth())

	// set up single route middleware, just uncomment the code and fill in the middlewares, nothing else needs to be changed
	//c.setSinglePath("POST", "/api/v1/sysRole", middleware.Auth())
	//c.setSinglePath("DELETE", "/api/v1/sysRole/:id", middleware.Auth())
	//c.setSinglePath("POST", "/api/v1/sysRole/delete/ids", middleware.Auth())
	//c.setSinglePath("PUT", "/api/v1/sysRole/:id", middleware.Auth())
	//c.setSinglePath("GET", "/api/v1/sysRole/:id", middleware.Auth())
	//c.setSinglePath("POST", "/api/v1/sysRole/condition", middleware.Auth())
	//c.setSinglePath("POST", "/api/v1/sysRole/list/ids", middleware.Auth())
	//c.setSinglePath("GET", "/api/v1/sysRole/list", middleware.Auth())
	//c.setSinglePath("POST", "/api/v1/sysRole/list", middleware.Auth())
}
